<?php

namespace Tests\Feature;

use App\Helpers\Helper;
use App\Jobs\SendBirthdayEmail;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Bus;
use Tests\TestCase;

class UserTest extends TestCase
{
    use RefreshDatabase, WithFaker;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        // now re-register all the roles and permissions (clears cache and reloads relations)
        $this->seed();
    }

    /**
     * @throws \Throwable
     */
    public function testCreateUser(): void
    {
        //Role Admin
        $name = $this->faker->firstName();
        $data = [
            'first_name' => $name,
            'email'=> $this->faker->email,
            'last_name' =>  $this->faker->lastName(),
            'location'=> $this->faker->timezone,
            'birthday'=> $this->faker->date
        ];
        $response = $this->postJson('/api/users', $data);
        $response->assertStatus(200);
        $response->assertJson(['message' => 'User created.']);
        $json = $response->decodeResponseJson();
        $this->assertEquals($json['data']['first_name'], $name);
    }

    /**
     * @return void
     */
    public function testUpdateUser(): void
    {
        $name = $this->faker->lastName();
        $data = [
            'email'=> $this->faker->email,
            'first_name' => $this->faker->firstName(),
            'last_name' =>  $name,
            'location'=> $this->faker->timezone,
            'birthday'=> $this->faker->date
        ];
        $user = User::get()->first();
        $response = $this->putJson('/api/users/'.$user->id,$data);
        $response->assertStatus(200);
        $json = $response->decodeResponseJson();
        $this->assertEquals($json['data']['last_name'], $name);
    }

    /**
     * @return void
     */
    public function testDeleteUser(): void
    {
        $user = User::get()->first();

        //Role Manager
        $response = $this->deleteJson('/api/users/'.$user->id);
        $response->assertStatus(200);

    }

    public function testIsUserBirthday()
    {
        $now = Carbon::now();
        $user = User::create([
            'id' =>$this->faker->uuid(),
            'email'=> $this->faker->email,
            'first_name'=>$this->faker->firstName,
            'last_name' =>  $this->faker->lastName(),
            'location'=> $now->getTimezone(),
            'birthday'=> $now->format('Y-m-d')
        ]);
        $this->assertTrue($user->isBirthday());

        $user = User::create([
            'id' =>$this->faker->uuid(),
            'email'=> $this->faker->email,
            'first_name'=>$this->faker->firstName,
            'last_name' =>  $this->faker->lastName(),
            'location'=> $now->getTimezone(),
            'birthday'=> $now->subDay()->format('Y-m-d')
        ]);
        $this->assertFalse($user->isBirthday());
    }

    public function testSendingMesssges(){

        $now = Carbon::now();
        $user = User::create([
            'id' =>$this->faker->uuid(),
            'email'=> $this->faker->email,
            'first_name'=>$this->faker->firstName,
            'last_name' =>  $this->faker->lastName(),
            'location'=> $now->getTimezone(),
            'birthday'=> $now->format('Y-m-d')
        ]);

        Bus::fake();

        $this->artisan('send:birthday-messages')->assertSuccessful();

        Bus::assertDispatched(SendBirthdayEmail::class);

    }


    public function testDelayedSchedule()
    {
        $now = Carbon::now();
        $user = User::create([
            'id' =>$this->faker->uuid(),
            'email'=> $this->faker->email,
            'first_name'=>$this->faker->firstName,
            'last_name' =>  $this->faker->lastName(),
            'location'=> $now->getTimezone(),
            'birthday'=> $now->addDay()->format('Y-m-d')
        ]);
        $delay = Helper::getDelayFromSchedule($user, $now->addDay()->setTime(6,0));
        $this->assertEquals($delay, 180);


    }
}
